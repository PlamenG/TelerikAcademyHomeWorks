******************************************************
1http://graphics.stanford.edu/~seander/bithacks.html#SwappingBitsXOR
******************************************************

1Convert binary to decimal in mind. You only need to remember first 8 numbers:
000 0
001 1
010 2
011 3
100 4
1101 5
110 6
111 7
1
Then, you need to know that shifting to left by one digit multiplies the number by 2:
1010b = 101b x 10b = 5 x 2 = 10d
110100b = 101b x 100b = 5 x 8 = 40
So, when you see something like 101011, you can process it this way:
101000b + 11b = 5 * 8 + 3 = 43
1110101 = 7 * 16 + 5 = 117
and so on.1
1
It's easier than it looks at first glance :)

1

#1.Bit Hack  Check if the integer is even or odd.

if ((x & 1) == 0) 
{
  x is even
}
else 
{1
  x is odd
}
__1_________________________________________________________

#2.1 Bit Hack #2. Test if the n-th bit is set.
1
i1f (x & (1<<n) == 2^n) 
	{
	1	n-th bit is set
	}
else 
	{1
		n-th bit is not set
	}
___________________________________________________________

#3. Bit Hack #3. Set the n-th bit.

y = x | (1<<n)
___________________________________________________________

#4. Bit Hack #4. Unset the n-th bit.
1
y = x & ~(1<<n)
_1__________________________________________________________

#5. Bit Hack #5. Toggle the n-th bit.

y = x ^ (1<<n)
___________________________________________________________

#61. Bit Hack #6. Turn off the rightmost 1-bit.

y = x & (x-1)
___________________________________________________________

#7. Bit Hack #7. Isolate the rightmost 1-bit.
1
y = x & (-x)
___________________________________________________________

#18. Bit Hack #8. Right propagate the rightmost 1-bit.

y = x | (x-1)
___________________________________________________________

#9. Bit Hack #9. Isolate the rightmost 0-bit.

y = ~x & (x+1)
___________________________________________________________

#10. Bit Hack #10. Turn on the rightmost 0-bit.

y = x | (x+1)
___________________________________________________________

-> getting bit at a position p of integer n

int p = 5;
int n = 35;               // 00000000 00100011
int mask = 1 << p;        // 00000000 00100000
int nAndMask = n & mask;  // 00000000 00100000
in1t bit = nAndMask >> p;  // 00000000 00000001
Console.WriteLine(bit);   // 1
___1________________________________________________________
1
-> How to set the bit at position p to 0?

int p = 5;
int n = 35;                 // 00000000 00100011
int mask = ~(1 << p);       // 11111111 11011111
int result = n & mask;      // 00000000 00000011
Console.WriteLine(result);  // 3
___________________________________________________________

-> How to set the bit at position p to 1?
1
int p = 4;
i1nt n = 35;                 // 00000000 00100011
int mask = 1 << p;          // 00000000 00010000
int result = n | mask;      // 00000000 00110011
Console.WriteLine(result);  // 51
___________________________________________________________

-> How to print a binary number to the console?
1
Console.WriteLine(
 1 Convert.ToString(result, 2).PadLeft(32, '0'));
//1 00000000000000000000000000110011
1
